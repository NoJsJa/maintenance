#!/bin/bash

# add for chkconfig
#chkconfig:23456 70 30
#description: mongo-service auto start

# # 变量读取
# var -- MongodbDir
readVar() {
  if [ ! -e /etc/frontend.conf ]; then
    echo ">>> You need to exec init.sh first ... "
    echo ">>> now exit ..."
    exit 0
  fi
  for var in `cat /etc/frontend.conf`; do
    a=`echo $var | awk -F '=' '{print $1}'`
    b=`echo $var | awk -F '=' '{print $2}'`
    export $a=$b
  done
}

# # warning / success print
function fLog(){
  if [ "${1}" -ne 0 ]
  then
    echo
    printf "\033[1;31m%b\033[0m" " ${2} \n"
    echo
  else
    echo
    printf "\033[1;32m%b\033[0m" "${2} \n"
    echo
  fi
}


# # 变量检查
checkVar() {
  mongodbPath=""
  mongodbLogPath=""
  mongodbLogName=""
  whoami=`whoami`
  mongodbHost=""
  mongodbPort=""
  frontendScriptPath=""

  readVar
}


# # Function

# # 停止pm2进程 ----------------
stop() {
  echo ">>> going to shutdown mongodb ... "
  mongod --shutdown --dbpath $mongodbPath
}

# # 启动mongodb进程 --------------
start() {
  # 01 make dbpath
  mkdir $mongodbPath -p
  mkdir $mongodbLogPath -p

  fLog 0 ">>> now check mongodb $mongodbPort ... "
  grep_port=`netstat -tlpn | grep "\b$mongodbPort\b"`

  if [ -n "$grep_port" ]
  then
    fLog 0 ">>> mongodb already started in port:$mongodbPort ..."
  else
    fLog 0 ">>> trying to start mongodb service ..."

    mongod -f ./conf/mongod.conf
  fi
}

# # 重启mongodb进程 --------------
restart() {
  stop
  start
}

# # 清理X天之前的目录/文件 --------------
# @param [String] type => which type you want to delete - [d/f]
# @param [Number] days => the days that you want to delete before it.
cleanBeforeDays() {
  if [[ -z $2 || $2 -lt 1 ]]; then
    fLog 1 "params - days, it's a number and can not be empty!"
  fi
  if [[ ! $1 = "d" || $1 = "f" ]]; then
    fLog 1 "params - type => the file type you want to delete, please input d(dir) or f(file)."
  fi
  find $mongodbBackupPath/dump -type $1 -mtime +$2 -exec rm -rf {} \;
  find $mongodbBackupPath/backup -type $1 -mtime +$2 -exec rm -rf {} \;
}


# # 清理所有数据 --------------
clean() {
  read -p 'are you sure to wipe mongodb data and restart (y/n) ? > ' -a choise
  if [[ "$choise" != "y" ]]; then
    exit 0
  fi

  backup
  stop
  rm $mongodbPath -rf
  rm $mongodbLogPath -rf
  start

  echo
  fLog 0 ">>> mongodb clean done! "
  echo
}

# # 清理远程的备份文件 -------------------
cleanRemoteBackup() {
  ip="$1"

  read -p "are you sure to wipe remote mongodb backup file on $ip (y/n) ? > " -a choise
  if [[ "$choise" != "y" ]]; then
    exit 0
  fi

  if [ $ip ]; then
    fLog 0 ">>> now delete remote backup files ... "
    ssh root@$ip rm -r -f /root/mongodb/backup /root/mongodb/dump
    backup $ip
    fLog 0 ">>> clean remote mongodb backup file and re-backup done ! "
  else
    fLog 1 ">>> command [--clean-remote] need param [ip]"
    fLog 1 ">>> see usage with [--help | -h]"
    exit 0;
  fi
}

# # 备份mongodb数据 --------------
# mongodump -h 127.0.0.1 -d yapi -o /root/mongodb/dump/
# 备份分为硬备份(拷贝数据库源数据、日志)和dump导出备份(只导出yapi)
backup() {
  fLog 0 ">>> now backup mongodb data and logs ... "
  mkdir -p $mongodbBackupPath

  local ip=""
  local backupPath=$mongodbBackupPath/backup
  local dumpPath=$mongodbBackupPath/dump
  local today=$(date +%Y-%m-%d)
  local lastDbPath=$(echo $mongodbPath | awk -F '/' '{print $NF}')
  local lastLogPath=$(echo $mongodbLogPath | awk -F "/" '{print $NF}')

  mkdir $backupPath -p
  mkdir $dumpPath -p
  rm $backupPath/$today -rf
  mkdir $backupPath/$today -p
  rm $dumpPath/$today -rf
  mkdir $dumpPath/$today -p

  while [ -n "$1" ]; do
    case "$1" in
      --ip )
        ip="$2"
        shift
      ;;
    esac
    shift
  done

  # 硬备份数据和日志文件到本地
  fLog 0 ">>> packaging logs and data to $backupPath ... "
  # rm $mongodbBackupPath/backup/* -f
  tar -czf $mongodbBackupPath/backup/$today/${lastDbPath}.gzip -C $mongodbPath/../ $lastDbPath
  tar -czf $mongodbBackupPath/backup/$today/${lastLogPath}.gzip -C $mongodbLogPath/../ $lastLogPath

  # dump导出yapi数据库到本地
  fLog 0 ">>> dumping logs and data to $dumpPath ... "

  # rm $dumpPath/* -rf

  mongodump -h $mongodbHost -d "yapi" -o $dumpPath/$today
  mongodump -h $mongodbHost -d "admin" -o $dumpPath/$today
  mongodump -h $mongodbHost -d "config" -o $dumpPath/$today
  mongodump -h $mongodbHost -d "local" -o $dumpPath/$today

  for dp in $(ls $dumpPath/$today); do
    if [ -d $dumpPath/$today/$dp ]; then
      tar -czf $dumpPath/$today/${dp}.gzip -C $dumpPath/$today $dp
      rm $dumpPath/$today/$dp -rf
    fi
  done

  # 所有数据备份到远程机器
  if [ $ip ]; then
    bash $frontendScriptPath/rsync --send "$ip"
  fi

  fLog 0 ">>> remove backup files before 10 days ..."
  cleanBeforeDays d 10

  echo
  fLog 0 ">>> mongodb backup done ... "
  echo
}

# # 恢复mongodb数据 --------------
# mongorestore -h 127.0.0.1 -d yapi /root/mongodb/dump/yapi
restore() {
  local fromDump="hard"
  local ip=""
  local date=""

  while [ -n "$1" ]; do
    case "$1" in
      --dump )
        fromDump="dump"
      ;;
      --ip )
        ip="$2"
        shift
      ;;
      --date )
        date=$2
        shift
    esac
    shift
  done

  read -p "are you sure to restore mongodb data from backup file ($fromDump) ? please input y/n >" -a choise
  if [[ "$choise" != "y" ]]; then
    exit 0
  fi

  fLog 0 ">>> now restore mongodb data and logs ... "
  # 检查路径
  if [ -z $mongodbBackupPath ]; then
    fLog 1 ">>> checkout mongodb backup path fail!"
    exit 1
  fi
  if [ -z $date ]; then
    fLog 1 ">>> operation restore need param - [date], [2020-05-20] e.g"
    exit
  fi

  # 检查是否从远程拿取备份文件
  if [ $ip ]; then
    # 从远程拿文件覆盖本地的备份
    rm $mongodbBackupPath/backup/$date/* -f
    rm $mongodbBackupPath/dump/$date/* -f
    bash $frontendScriptPath/rsync --get $ip
  fi

  # 选择从dump恢复还是硬恢复
  if [[ $fromDump == "hard" ]]; then
    # 检查本地备份文件
    local allBackupFiles=$(ls $mongodbBackupPath/backup/$date)
    local dataFile=''
    local logFile=''
    for backupFile in ${allBackupFiles[@]}; do
      if [ -n "`echo $backupFile | sed '/dbs/'p -n`" ]; then
        dataFile=$mongodbBackupPath/backup/$date/$backupFile
      fi
      if [ -n `echo $backupFile | sed '/logs/'p -n` ]; then
        logFile=$mongodbBackupPath/backup/$date/$backupFile
      fi
    done

    # 停止mongodb
    fLog 0 ">>> now trying to stop mongodb ... "
    stop

    if [ -f $dataFile ]; then
      rm $mongodbPath/data -rf
      tar -xf $dataFile -C $mongodbPath
      fLog 0 ">>> mongodb data file restore done!"
    fi

    if [ -f $logFile ]; then
      rm $mongodbPath/logs -rf
      tar -xf $logFile -C $mongodbPath
      fLog 0 ">>> mongodb log file restore done!"
    fi

    # 开启mongodb
    fLog 0 ">>> now trying to start mongodb ... "
    # start
    systemctl start mongodb

  else

    local baseName=''
    for dp in $(ls $mongodbBackupPath/dump/$date); do
      if [ -f $mongodbBackupPath/dump/$date/$dp ]; then
        baseName=$(basename "$dp" .gzip)
        tar -xf $mongodbBackupPath/dump/$date/$dp -C $mongodbBackupPath/dump/$date
        mongorestore -h $mongodbHost -d $baseName $mongodbBackupPath/dump/$date/$baseName
        rm $mongodbBackupPath/dump/$date/$baseName -rf
      fi
    done

  fi

  echo
  fLog 0 ">>> mongodb restore done! "
  echo

}

# # 设置定时备份任务每天零点备份一次 -----------------
setCronTab() {
  local timeRule="* 0 * * * "

  local ip=""
  local scheduleFile=$frontendScriptPath/conf/rsync-schedule

  while [ -n "$1" ]; do
    case "$1" in
      -s )
        timeRule="$2"
        shift
      ;;
      -t )
        ip="$2"
        shift
      ;;
    esac
    shift
  done

  rm $scheduleFile -f
  touch $scheduleFile

  echo "# # mongodb备份定时任务" >> $scheduleFile
  echo "SHELL=/bin/bash" >> $scheduleFile
  echo "PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin" >> $scheduleFile
  echo "" >> $scheduleFile
  echo "# minute   hour   day   month   week   command" >> $scheduleFile
  echo "$timeRule bash $frontendScriptPath/mongodb backup" >> $scheduleFile

  # 删除旧的crontab任务
  disableCronTab
  crontab -u root $scheduleFile
  fLog 0 ">>> enable the mongodb-backup crontab service done!"
}

# # 清除定时备份任务 --------------
disableCronTab() {
  sed -i '/mongodb backup/d' /var/spool/cron/root
  fLog 0 ">>> disable the mongodb-backup crontab service done!"
}

# # 显示帮助信息 ----------------------
showUsage() {
  echo
  echo "main: bash mongodb [--param]"
  echo "|___ param: [--start   | start   ]      => start mongodb.service"
  echo "|___ param: [--stop    | stop    ]      => stop mongodb.service"
  echo "|___ param: [--restart | restart ]      => restart mongodb.service"
  echo "|___ param: [--clean   | clean   ]      => wipe mongodb data and restart"
  echo "|___ param: [--clean-remote | -cr] [ip]          => clean remote [ip]'s mongodb backup file before today(`date +%Y-%m-%d`)"
  echo "|___ param: [ backup ] [--ip ip]          => backup mongodb data to local and remote(if you set the param [ip])"
  echo "       |___ example: bash mongodb backup --ip 10.0.6.231"
  echo "       |___ example: bash mongodb backup --ip 10.0.6.231"
  echo "       |___ example: bash mongodb backup"
  echo
  echo "|___ param: [ restore ] [--ip ip] [--dump] => restore mongodb data from local or remote(if you set the param [ip])"
  echo "       |___ example: bash mongodb restore --dump --ip 10.0.6.231"
  echo "       |___ example: bash mongodb restore --ip 10.0.6.231 --dump"
  echo "       |___ example: bash mongodb restore --ip 10.0.6.231"
  echo "       |___ example: bash mongodb restore"
  echo
  echo "|___ param: [--crontab           ]      => enable mongodb-backup service crontab service"
  echo "|___ param: [--drontab           ]      => disable mongodb-backup service crontab service"
  echo "|___ param: [--help    | -h      ]      => show help info"
  echo
}

# # Main Action

Main() {
  checkVar
  case $1 in

    --start | start )
      start
    ;;

    --stop | stop )
      stop
    ;;

    --restart | restart )
      restart
    ;;

    --cleanBeforeDays | -cbd )
      cleanBeforeDays $2 $3
      exit
    ;;

    --clean | clean )
      clean
    ;;

    --clean-remote | -cr )
      shift
      cleanRemoteBackup $@
    ;;

    backup )
      shift
      backup $@
    ;;

    restore )
      shift
      restore $@
    ;;

    --help | -h )
      showUsage
    ;;

    --crontab )
      shift
      setCronTab $@
    ;;

    --drontab )
      disableCronTab
    ;;
    
  esac
}

Main $@
